// Generated by gencpp from file scout_msgs/ScoutBmsStatus.msg
// DO NOT EDIT!


#ifndef SCOUT_MSGS_MESSAGE_SCOUTBMSSTATUS_H
#define SCOUT_MSGS_MESSAGE_SCOUTBMSSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scout_msgs
{
template <class ContainerAllocator>
struct ScoutBmsStatus_
{
  typedef ScoutBmsStatus_<ContainerAllocator> Type;

  ScoutBmsStatus_()
    : SOC(0.0)
    , SOH(0.0)
    , battery_voltage(0.0)
    , battery_current(0.0)
    , battery_temperature(0.0)
    , Alarm_Status_1(0)
    , Alarm_Status_2(0)
    , Warning_Status_1(0)
    , Warning_Status_2(0)  {
    }
  ScoutBmsStatus_(const ContainerAllocator& _alloc)
    : SOC(0.0)
    , SOH(0.0)
    , battery_voltage(0.0)
    , battery_current(0.0)
    , battery_temperature(0.0)
    , Alarm_Status_1(0)
    , Alarm_Status_2(0)
    , Warning_Status_1(0)
    , Warning_Status_2(0)  {
  (void)_alloc;
    }



   typedef double _SOC_type;
  _SOC_type SOC;

   typedef double _SOH_type;
  _SOH_type SOH;

   typedef double _battery_voltage_type;
  _battery_voltage_type battery_voltage;

   typedef double _battery_current_type;
  _battery_current_type battery_current;

   typedef double _battery_temperature_type;
  _battery_temperature_type battery_temperature;

   typedef uint8_t _Alarm_Status_1_type;
  _Alarm_Status_1_type Alarm_Status_1;

   typedef uint8_t _Alarm_Status_2_type;
  _Alarm_Status_2_type Alarm_Status_2;

   typedef uint8_t _Warning_Status_1_type;
  _Warning_Status_1_type Warning_Status_1;

   typedef uint8_t _Warning_Status_2_type;
  _Warning_Status_2_type Warning_Status_2;





  typedef boost::shared_ptr< ::scout_msgs::ScoutBmsStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scout_msgs::ScoutBmsStatus_<ContainerAllocator> const> ConstPtr;

}; // struct ScoutBmsStatus_

typedef ::scout_msgs::ScoutBmsStatus_<std::allocator<void> > ScoutBmsStatus;

typedef boost::shared_ptr< ::scout_msgs::ScoutBmsStatus > ScoutBmsStatusPtr;
typedef boost::shared_ptr< ::scout_msgs::ScoutBmsStatus const> ScoutBmsStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scout_msgs::ScoutBmsStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scout_msgs::ScoutBmsStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scout_msgs::ScoutBmsStatus_<ContainerAllocator1> & lhs, const ::scout_msgs::ScoutBmsStatus_<ContainerAllocator2> & rhs)
{
  return lhs.SOC == rhs.SOC &&
    lhs.SOH == rhs.SOH &&
    lhs.battery_voltage == rhs.battery_voltage &&
    lhs.battery_current == rhs.battery_current &&
    lhs.battery_temperature == rhs.battery_temperature &&
    lhs.Alarm_Status_1 == rhs.Alarm_Status_1 &&
    lhs.Alarm_Status_2 == rhs.Alarm_Status_2 &&
    lhs.Warning_Status_1 == rhs.Warning_Status_1 &&
    lhs.Warning_Status_2 == rhs.Warning_Status_2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scout_msgs::ScoutBmsStatus_<ContainerAllocator1> & lhs, const ::scout_msgs::ScoutBmsStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scout_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::scout_msgs::ScoutBmsStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scout_msgs::ScoutBmsStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scout_msgs::ScoutBmsStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scout_msgs::ScoutBmsStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scout_msgs::ScoutBmsStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scout_msgs::ScoutBmsStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scout_msgs::ScoutBmsStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8825e008639377a676911a7ad9d079ce";
  }

  static const char* value(const ::scout_msgs::ScoutBmsStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8825e008639377a6ULL;
  static const uint64_t static_value2 = 0x76911a7ad9d079ceULL;
};

template<class ContainerAllocator>
struct DataType< ::scout_msgs::ScoutBmsStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scout_msgs/ScoutBmsStatus";
  }

  static const char* value(const ::scout_msgs::ScoutBmsStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scout_msgs::ScoutBmsStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#BMS date\n"
"float64 SOC\n"
"float64 SOH\n"
"float64 battery_voltage\n"
"float64 battery_current\n"
"float64 battery_temperature\n"
"\n"
"#BMS status\n"
"uint8 Alarm_Status_1\n"
"uint8 Alarm_Status_2\n"
"uint8 Warning_Status_1\n"
"uint8 Warning_Status_2\n"
;
  }

  static const char* value(const ::scout_msgs::ScoutBmsStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scout_msgs::ScoutBmsStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.SOC);
      stream.next(m.SOH);
      stream.next(m.battery_voltage);
      stream.next(m.battery_current);
      stream.next(m.battery_temperature);
      stream.next(m.Alarm_Status_1);
      stream.next(m.Alarm_Status_2);
      stream.next(m.Warning_Status_1);
      stream.next(m.Warning_Status_2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ScoutBmsStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scout_msgs::ScoutBmsStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scout_msgs::ScoutBmsStatus_<ContainerAllocator>& v)
  {
    s << indent << "SOC: ";
    Printer<double>::stream(s, indent + "  ", v.SOC);
    s << indent << "SOH: ";
    Printer<double>::stream(s, indent + "  ", v.SOH);
    s << indent << "battery_voltage: ";
    Printer<double>::stream(s, indent + "  ", v.battery_voltage);
    s << indent << "battery_current: ";
    Printer<double>::stream(s, indent + "  ", v.battery_current);
    s << indent << "battery_temperature: ";
    Printer<double>::stream(s, indent + "  ", v.battery_temperature);
    s << indent << "Alarm_Status_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Alarm_Status_1);
    s << indent << "Alarm_Status_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Alarm_Status_2);
    s << indent << "Warning_Status_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Warning_Status_1);
    s << indent << "Warning_Status_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Warning_Status_2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCOUT_MSGS_MESSAGE_SCOUTBMSSTATUS_H
